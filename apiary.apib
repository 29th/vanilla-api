FORMAT: 1A

# Vanilla API

This documentation is for the open source API shim for Vanilla (https://github.com/kasperisager/vanilla-api). For documentation on the official Simple API for the hosted version of Vanilla go to: http://docs.vanillaforums.com/api/

# Group Miscellaneous

## Configuration [/configuration]

### Get the current configuration [GET]

+ Response 200 (application/json)
    + Body
        {
            "Configuration": {
                ...
            }
        }

## Search [/search{?Search}]

### Perform a search [GET]

+ Parameters
    + Search (optional, string, `foo`) ... The search query.  

+ Response
    + Body
        {
            "SearchResults": [
                ...
            ],
            "SearchTerm": "foo",
            "SearchTerms": [
                ...
            ],
            "From": 1,
            "To": 29
        }

# Group Categories

## All [/categories]

### Find all categories [GET]

### Create a new category [POST]

+ Request
    + Body
        {
            "Name": "Foo Bar",
            "UrlCode": "foo-bar"
        }

+ Response 200 (application/json)

## Single [/categories/{category_id}]

+ Parameters
    + category_id (required, integer, `1`) ... The ID of the category.

### Find an existing category [GET]

+ Response 200 (application/json)

### Update an existing category [PUT]

+ Request
    + Body
        {
            "Name": "Foo Bar",
            "UrlCode": "foo-bar"
        }

+ Response 200 (application/json)

### Remove an existing category [DELETE]

+ Response 200 (application/json)

## Discussions [/categories/{category_id}/discussions]

+ Parameters
    + category_id (required, integer, `1`) ... The ID of the category.

### Create a new discussion [POST]

+ Request
    + Body
        {
            "Name": "Foo Bar",
            "Body": "Lorem ipsum dolor sit amet.",
            "Format": "Markdown"
        }

+ Response 200 (application/json)

# Group Discussions

## All [/discussions]

### Find all discussions [GET]

+ Response 200 (application/json)
    + Body
        {
            "Category": "123",
            "CountDiscussions": "123",
            "Announcements": [
                ...
            ],
            "Discussions": [
                ...
            ]
        }

### Create a new discussion [POST]

+ Request

    + Body
        {
            "Name": "Foo Bar",
            "Body": "Lorem ipsum dolor sit amet.".
            "CategoryID": 2
        }

+ Response 200 (application/json)
    
    The newly created discussion.

    + Body
        {
            "Discussion": {
                ...
            },
            "Type": "Discussion"
        }

## Single [/discussions/{discussion_id}]

+ Parameters
    + discussion_id (required, integer, `1`) ... The ID of the discussion.

### Find an existing discussion [GET]

+ Response 200 (application/json)
    The requested discussion if found and if the authorized user has permission to access it.

    + Body
        {
            "Category": {
                ...
            },
            "Discussion": {
                ...
            },
            "Page": "1"
        }
        
### Update an existing discussion [PUT]

+ Request

    + Body
        {
            "Name": "Foo Bar",
            "Body": "Lorem ipsum dolor sit amet.".
            "CategoryID": 2
        }
        
+ Response 200 (application/json)
    The updated discussion.

    + Body
        {
            "Discussion": {
                ...
            },
            "Type": "Discussion"
        }
        
### Remove an existing discussion [DELETE]

+ Response 200 (application/json)
    The discussion was removed successfully.
    
    + Body
        {}

## Comments [/discussions/{discussion_id}/comments]

+ Parameters
    + discussion_id (required, integer, `1`) ... The ID of the discussion.

### Create a new comment [POST]

+ Request
    + Body
        {
            "Body": "Lorem ipsum dolor amet.",
            "Format": "Markdown"
        }

+ Response 200 (application/json)
    The newly created comment.

    + Body
        {
            "Comment": {
                ...
            }
        }

## Comment [/discussions/{discussion_id}/comments/{comment_id}]

+ Parameters
    + discussion_id (required, integer, `1`) ... The ID of the discussion.
    + comment_id (required, integer, `1`) ... The ID of the comment.

### Update an existing comment [PUT]

+ Response 200 (application/json)
    The updated comment.

    + Body
        {
            "Comment": {
                ...
            }
        }

### Remove an existing comment [DELETE]

+ Response 200 (application/json)
    The comment was removed successfully.

    + Body
        {}

## Bookmarks [/discussions/bookmarks]

### Find own bookmarks [GET]

+ Response 200 (application/json)
    + Body
        {
            "CountDiscussions": "123",
            "Discussions": [
                ...
            ]
        }

## Own [/discussions/mine]

### Find own discussions [GET]

+ Response 200 (application/json)
    + Body
        {
            "CountDiscussions": "123",
            "Discussions": [
                ...
            ]
        }

# Group Activities

## All [/activities]

### Find all activities [GET]

### Create a new activity [POST]

+ Request
    + Body
        {
            "Comment": ""
        }

## Single [/activities/{activity_id}]

+ Parameters
    + discussion_id (required, integer, `1`) ... The ID of the discussion.

### Find an existing activity [GET]

### Remove an existing activity [DELETE]

# Group Conversations

## All [/conversations]

### Find all conversations [GET]

+ Response 200 (application/json)
    + Body
        {
            "Conversations": [
                ...
            ]
        }

### Create a new conversation [POST]

+ Request
    + Body
        {
            "To": "",
            "Body": ""
        }

## Single [/conversations/{conversation_id}]

+ Parameters
    + discussion_id (required, integer, `1`) ... The ID of the discussion.
    
### Find an existing conversation [GET]

+ Response 200 (application/json)
    + Body
        {
            "Conversation": {
                ...
            },
            "Messages": [
                ...
            ]
        }

### Remove an existing conversation [DELETE]

+ Response 200 (application/json)

### Create a new message [POST]

+ Request
    + Body
        {
            "Body": ""
        }

## Messages [/conversations/{conversation_id}/messages]

# Group Users

## All [/users]

### Find all users [GET]

+ Response 200 (application/json)
    + Body
        {
            "RecordCount": "123",
            "Users": [
                ...
            ]
        }

### Create a new user [POST]

+ Request
    + Body
        {
            "Name": "",
            "Email": "",
            "Password": "",
            "RoleID": [0]
        }

+ Response 200 (application/json)

## Single [/users/{user_id}]

### Find an existing user [GET]

+ Response 200 (application/json)
    + Body
        {
            "Activities": [
                ...
            ],
            "Profile": {
                ...
            },
            "UserRoles": [
                ...
            ]
        }

### Update an existing user [PUT]

+ Request
    + Body
        {
            "Name": "",
            "Email": "",
            "Password": "",
            "RoleID": [0]
        }

+ Response 200 (application/json)

### Remove an existing user [DELETE]

+ Response 200 (application/json)

## Summary [/users/summary]

### Get a summary of all users [GET]

+ Response 200 (application/json)
    + Body
        {
            "UserData": [
                ...
            ]
        }

# Group Roles

## All [/roles]

### Create a new role [POST]

+ Request
    + Body
        {
            "Name": "Captain",
            "Permission": [
                ...
            ]
        }

## Single [/roles/{role_id}]

# Group Bans

## All [/moderation/bans]

### Find all bans [GET]

+ Response 200 (application/json)
    + Body
        {
            "Bans": [
                ...
            ]
        }

### Create a new ban [POST]

## Single [/moderation/bans/{ban_id}]

### Update an existing ban [PUT]

### Remove an existing ban [DELETE]

###

# Group Logs

## Spam [/logs/spam]

### Find all spam log entries [GET]

## Moderation [/logs/moderation]

### Find all moderation log entries [GET]

## Edits [/logs/edits]

### Find all change log entries [GET]